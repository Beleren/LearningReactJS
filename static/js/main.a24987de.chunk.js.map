{"version":3,"sources":["resources/images/le-potato.jpg","resources/images/fuba.jpg","components/Home.js","components/examples/Foo.js","components/Header.js","components/examples/Bar.js","components/App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","Home","react_default","a","createElement","className","src","logo","alt","href","target","rel","Component","Foo","state","Header","myFunction","x","document","getElementById","id","react_router_dom","to","isActive","onClick","this","Bar","fuba","App","components_Header","react","fallback","react_router","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","components_App","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4EAAAA,EAAAC,QAAiBC,EAAAC,EAAuB,0DCAxCH,EAAAC,QAAiBC,EAAAC,EAAuB,6RCyBzBC,0LAnBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACbH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,cAChBH,EAAAC,EAAAC,cAAA,OAAKE,IAAKC,IAAMF,UAAU,WAAWG,IAAI,SACzCN,EAAAC,EAAAC,cAAA,oDACAF,EAAAC,EAAAC,cAAA,KACEC,UAAU,WACVI,KAAK,6BACLC,OAAO,SACPC,IAAI,uBAJN,kCAPSC,cCKJC,6MANbC,MAAQ,2EAEN,OAAOZ,EAAAC,EAAAC,cAAA,2BAHOQ,aCsCHG,oNAnCbD,MAAQ,KAGRE,WAAa,WACX,IAAIC,EAAIC,SAASC,eAAe,YACZ,WAAhBF,EAAEZ,UACJY,EAAEZ,WAAa,cAEfY,EAAEZ,UAAY,kFAKhB,OACEH,EAAAC,EAAAC,cAAA,WAKEF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SAASe,GAAG,YACzBlB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAAMC,GAAG,IAAIC,UAAU,GAAvB,QAGArB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAG,QAAZ,OACApB,EAAAC,EAAAC,cAACiB,EAAA,EAAD,CAASC,GAAG,OAAZ,MACApB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,OAAOmB,QAASC,KAAKT,YAEhCd,EAAAC,EAAAC,cAAA,OAAKC,UAAU,4BA5BNO,+BCMNc,6MANbZ,MAAQ,2EAEN,OAAOZ,EAAAC,EAAAC,cAAA,OAAKE,IAAKqB,IAAMtB,UAAU,OAAOG,IAAI,gBAH9BI,aCqBHgB,mLAfX,OACE1B,EAAAC,EAAAC,cAACiB,EAAA,EAAD,KACEnB,EAAAC,EAAAC,cAACyB,EAAD,MACA3B,EAAAC,EAAAC,cAAC0B,EAAA,SAAD,CAAUC,SAAU7B,EAAAC,EAAAC,cAAA,0BAClBF,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,KACE9B,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWlC,IACjCC,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,OAAOC,UAAWtB,IACpCX,EAAAC,EAAAC,cAAC4B,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,MAAMC,UAAWT,cAT7Bd,aCKEwB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOxC,EAAAC,EAAAC,cAACuC,EAAD,MAASzB,SAASC,eAAe,SD2H3C,kBAAmByB,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a24987de.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/le-potato.f0d3e1fd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/fuba.245c1f9c.jpg\";","import React, { Component } from \"react\";\nimport logo from \"../resources/images/le-potato.jpg\";\nimport \"../css/App.css\";\n\nclass Home extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          <p>Vamos ver o que vai dar essa bagaça.</p>\n          <a\n            className=\"App-link\"\n            href=\"https://github.com/Beleren\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Github da desgraça\n          </a>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default Home;\n","import React, { Component } from \"react\";\n\nclass Foo extends Component {\n  state = {};\n  render() {\n    return <div>Teste</div>;\n  }\n}\n\nexport default Foo;\n","import React, { Component } from \"react\";\nimport { NavLink, Link } from \"react-router-dom\";\nimport \"../css/shapes.css\";\n\nclass Header extends Component {\n  state = {};\n\n  /* Toggle between adding and removing the \"responsive\" className to topnav when the user clicks on the icon */\n  myFunction = () => {\n    var x = document.getElementById(\"myTopnav\");\n    if (x.className === \"topnav\") {\n      x.className += \" responsive\";\n    } else {\n      x.className = \"topnav\";\n    }\n  };\n\n  render() {\n    return (\n      <div>\n        {/* <link\n          rel=\"stylesheet\"\n          href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css\"\n        /> */}\n        <div className=\"topnav\" id=\"myTopnav\">\n          <Link to=\"/\" isActive={false}>\n            Home\n          </Link>\n          <NavLink to=\"/foo\">Foo</NavLink>\n          <NavLink to=\"/ba\">Ba</NavLink>\n          <a className=\"icon\" onClick={this.myFunction}>\n            {/* <i className=\"fa fa-bars\" /> */}\n            <div className=\"triangle-down\" />\n          </a>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\nimport fuba from \"../../resources/images/fuba.jpg\";\n\nclass Bar extends Component {\n  state = {};\n  render() {\n    return <img src={fuba} className=\"fuba\" alt=\"fuba\" />;\n  }\n}\n\nexport default Bar;\n","import { HashRouter as Router, Route, Switch } from \"react-router-dom\";\nimport React, { Component, Suspense } from \"react\";\nimport Home from \"./Home\";\nimport Foo from \"./examples/Foo\";\nimport Header from \"./Header\";\nimport Bar from \"./examples/Bar\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Router>\n        <Header />\n        <Suspense fallback={<div>Loading...</div>}>\n          <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route exact path=\"/foo\" component={Foo} />\n            <Route exact path=\"/ba\" component={Bar} />\n          </Switch>\n        </Suspense>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}